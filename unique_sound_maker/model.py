# -*- coding: utf-8 -*-
"""Tìm kiếm nhạc bằng âm thanh

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rWnjUiLpmDxsN7j_FV2R9PP7DMAetWho

# Truy cập driver
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
import os

drive.mount('/content/gdrive')
path = "/content/gdrive/My Drive/My Sounds"
# OS.chdir(path)
# %cd {path}
!ls

"""# Trích chọn đặc trưng"""

# !pip install librosa
# !pip install python_speech_features
import os
import glob
import librosa
from tqdm import tqdm
import numpy as np
from python_speech_features import mfcc, fbank, logfbank

"""# Đặc trưng dựa trên đường bao phổ tần số MFCC"""

def extract_features(y, sr=16000, nfilt=10, winsteps=0.02):
    try:
        feat = mfcc(y, sr, nfilt=nfilt, winstep=winsteps)
        return feat
    except:
        raise Exception("Extraction feature error")
        
def crop_feature(feat, i = 0, nb_step=10, maxlen=100):
    crop_feat = np.array(feat[i : i + nb_step]).flatten()
    print(crop_feat.shape)
    crop_feat = np.pad(crop_feat, (0, maxlen - len(crop_feat)), mode='constant')
    return crop_feat

"""Ví dụ"""

y, sr = librosa.load('/content/gdrive/My Drive/My Sounds/MeEmNhacAnh-OrangeHamletTruong-7136377.mp3', sr=16000)
feat = extract_features(y, 50)
print(crop_feature(feat).shape)

"""# Đặc trưng dựa trên biên độ âm thanh"""

features = []
songs = []
for song in tqdm(os.listdir('/content/gdrive/My Drive/My Sounds')):
    song = os.path.join('/content/gdrive/My Drive/My Sounds', song)
    y, sr = librosa.load(song, sr=16000)
    feat = extract_features(y)
    for i in range(0, feat.shape[0] - 10, 5):
        features.append(crop_feature(feat, i, nb_step=10))
        songs.append(song)

"""Lưu lại các đặc trưng của bài hát"""

import pickle

pickle.dump(features, open('features.pk', 'wb'))

pickle.dump(songs, open('songs.pk', 'wb'))

"""# Truy vấn bằng Approximate Nearest Neighbors"""

# !pip install annoy 
from annoy import AnnoyIndex
import pickle

f = 100
t = AnnoyIndex(f)

infile = open('/content/gdrive/MyDrive/My Sounds/features.pk','rb')
features = pickle.load(infile)

for i in range(len(features)):
    v = features[i]
    t.add_item(i, v)

"""Tạo cây index"""

t.build(100) # 100 trees
t.save('music.ann')

"""Load lại cây"""

f = 100

u = AnnoyIndex(f)

u.load('/content/gdrive/MyDrive/My Sounds/music.ann')

"""# Tìm kiếm bài hát tương tự"""

song = os.path.join('/content/gdrive/My Drive/My Sounds', '/content/gdrive/My Drive/My Sounds/Test/tic-tac-27828.mp3')
y, sr = librosa.load(song)
feat = extract_features(y)

results = []
for i in range(0, feat.shape[0], 10):
    crop_feat = crop_feature(feat, i, nb_step=10)
    result = u.get_nns_by_vector(crop_feat, n=5)
    result_songs = [songs[k] for k in result]
    results.append(result_songs)
    
results = np.array(results).flatten()

# from collections import Counter

# most_song = Counter(results)
# most_song.most_common()
unique, counts = np.unique(results, return_counts=True)
a = dict(zip(unique, counts))
b = []
for key in a:
    if a[key] > 100:
        b.append(key)
if len(b) == 0:
    print('Chúc mừng bạn đã có một NFT mới!')
else:
    print('Có các NFT giống với sounds của bạn là: ')
    for i in range(len(b) - 1):
        print(b[i])
    print('Hãy chọn một bản nhạc khác làm NFT!')


